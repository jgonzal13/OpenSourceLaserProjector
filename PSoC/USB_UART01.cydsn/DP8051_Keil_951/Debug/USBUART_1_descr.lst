C51 COMPILER V9.51   USBUART_1_DESCR                                                       03/25/2014 11:26:59 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBUART_1_DESCR
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\USBUART_1_descr.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\USBUART_1_descr.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051_Keil_951\Debug\USBUART_1_descr.lst) 
                    -CD DB NOIP OT(2,SIZE) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051_Keil_951\Debug\USBUART_1_descr.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: USBUART_1_descr.c
   3          * Version 2.60
   4          *
   5          * Description:
   6          *  USB descriptors and storage.
   7          *
   8          *  Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "USBUART_1.h"
  18          #include "USBUART_1_pvt.h"
  19          
  20          
  21          /*****************************************************************************
  22          *  User supplied descriptors.  If you want to specify your own descriptors,
  23          *  remove the comments around the define USER_SUPPLIED_DESCRIPTORS below and
  24          *  add your descriptors.
  25          *****************************************************************************/
  26          /* `#START USER_DESCRIPTORS_DECLARATIONS` Place your declaration here */
  27          
  28          /* `#END` */
  29          
  30          
  31          /***************************************
  32          *  USB Customizer Generated Descriptors
  33          ***************************************/
  34          
  35          #if !defined(USER_SUPPLIED_DESCRIPTORS)
  36          /*********************************************************************
  37          * Device Descriptors
  38          *********************************************************************/
  39          const uint8 CYCODE USBUART_1_DEVICE0_DESCR[18u] = {
  40          /* Descriptor Length                       */ 0x12u,
  41          /* DescriptorType: DEVICE                  */ 0x01u,
  42          /* bcdUSB (ver 2.0)                        */ 0x00u, 0x02u,
  43          /* bDeviceClass                            */ 0x02u,
  44          /* bDeviceSubClass                         */ 0x00u,
  45          /* bDeviceProtocol                         */ 0x00u,
  46          /* bMaxPacketSize0                         */ 0x08u,
  47          /* idVendor                                */ 0xB4u, 0x04u,
  48          /* idProduct                               */ 0x32u, 0xF2u,
  49          /* bcdDevice                               */ 0x01u, 0x00u,
  50          /* iManufacturer                           */ 0x01u,
  51          /* iProduct                                */ 0x04u,
  52          /* iSerialNumber                           */ 0x80u,
  53          /* bNumConfigurations                      */ 0x01u
C51 COMPILER V9.51   USBUART_1_DESCR                                                       03/25/2014 11:26:59 PAGE 2   

  54          };
  55          /*********************************************************************
  56          * Config Descriptor  
  57          *********************************************************************/
  58          const uint8 CYCODE USBUART_1_DEVICE0_CONFIGURATION0_DESCR[67u] = {
  59          /*  Config Descriptor Length               */ 0x09u,
  60          /*  DescriptorType: CONFIG                 */ 0x02u,
  61          /*  wTotalLength                           */ 0x43u, 0x00u,
  62          /*  bNumInterfaces                         */ 0x02u,
  63          /*  bConfigurationValue                    */ 0x01u,
  64          /*  iConfiguration                         */ 0x01u,
  65          /*  bmAttributes                           */ 0xC0u,
  66          /*  bMaxPower                              */ 0x32u,
  67          /*********************************************************************
  68          * CDC Interface Descriptor
  69          *********************************************************************/
  70          /*  Interface Descriptor Length            */ 0x09u,
  71          /*  DescriptorType: INTERFACE              */ 0x04u,
  72          /*  bInterfaceNumber                       */ 0x00u,
  73          /*  bAlternateSetting                      */ 0x00u,
  74          /*  bNumEndpoints                          */ 0x01u,
  75          /*  bInterfaceClass                        */ 0x02u,
  76          /*  bInterfaceSubClass                     */ 0x02u,
  77          /*  bInterfaceProtocol                     */ 0x00u,
  78          /*  iInterface                             */ 0x02u,
  79          /*********************************************************************
  80          * Header Descriptor
  81          *********************************************************************/
  82          /*  Header Descriptor Length               */ 0x05u,
  83          /*  DescriptorType: CS_INTERFACE           */ 0x24u,
  84          /*  bDescriptorSubtype                     */ 0x00u,
  85          /*  bcdADC                                 */ 0x10u, 0x01u,
  86          /*********************************************************************
  87          * Abstract Control Management Descriptor
  88          *********************************************************************/
  89          /*  Abstract Control Management Descriptor Length*/ 0x04u,
  90          /*  DescriptorType: CS_INTERFACE           */ 0x24u,
  91          /*  bDescriptorSubtype                     */ 0x02u,
  92          /*  bmCapabilities                         */ 0x02u,
  93          /*********************************************************************
  94          * Union Descriptor
  95          *********************************************************************/
  96          /*  Union Descriptor Length                */ 0x05u,
  97          /*  DescriptorType: CS_INTERFACE           */ 0x24u,
  98          /*  bDescriptorSubtype                     */ 0x06u,
  99          /*  bControlInterface                      */ 0x00u,
 100          /*  bSubordinateInterface                  */ 0x01u,
 101          /*********************************************************************
 102          * Call Management Descriptor
 103          *********************************************************************/
 104          /*  Call Management Descriptor Length      */ 0x05u,
 105          /*  DescriptorType: CS_INTERFACE           */ 0x24u,
 106          /*  bDescriptorSubtype                     */ 0x01u,
 107          /*  bmCapabilities                         */ 0x00u,
 108          /*  bDataInterface                         */ 0x01u,
 109          /*********************************************************************
 110          * Endpoint Descriptor
 111          *********************************************************************/
 112          /*  Endpoint Descriptor Length             */ 0x07u,
 113          /*  DescriptorType: ENDPOINT               */ 0x05u,
 114          /*  bEndpointAddress                       */ 0x81u,
 115          /*  bmAttributes                           */ 0x03u,
C51 COMPILER V9.51   USBUART_1_DESCR                                                       03/25/2014 11:26:59 PAGE 3   

 116          /*  wMaxPacketSize                         */ 0x08u, 0x00u,
 117          /*  bInterval                              */ 0x0Au,
 118          /*********************************************************************
 119          * Data Interface Descriptor
 120          *********************************************************************/
 121          /*  Interface Descriptor Length            */ 0x09u,
 122          /*  DescriptorType: INTERFACE              */ 0x04u,
 123          /*  bInterfaceNumber                       */ 0x01u,
 124          /*  bAlternateSetting                      */ 0x00u,
 125          /*  bNumEndpoints                          */ 0x02u,
 126          /*  bInterfaceClass                        */ 0x0Au,
 127          /*  bInterfaceSubClass                     */ 0x00u,
 128          /*  bInterfaceProtocol                     */ 0x00u,
 129          /*  iInterface                             */ 0x03u,
 130          /*********************************************************************
 131          * Endpoint Descriptor
 132          *********************************************************************/
 133          /*  Endpoint Descriptor Length             */ 0x07u,
 134          /*  DescriptorType: ENDPOINT               */ 0x05u,
 135          /*  bEndpointAddress                       */ 0x82u,
 136          /*  bmAttributes                           */ 0x02u,
 137          /*  wMaxPacketSize                         */ 0x40u, 0x00u,
 138          /*  bInterval                              */ 0x0Au,
 139          /*********************************************************************
 140          * Endpoint Descriptor
 141          *********************************************************************/
 142          /*  Endpoint Descriptor Length             */ 0x07u,
 143          /*  DescriptorType: ENDPOINT               */ 0x05u,
 144          /*  bEndpointAddress                       */ 0x03u,
 145          /*  bmAttributes                           */ 0x02u,
 146          /*  wMaxPacketSize                         */ 0x40u, 0x00u,
 147          /*  bInterval                              */ 0x0Au
 148          };
 149          
 150          /*********************************************************************
 151          * String Descriptor Table
 152          *********************************************************************/
 153          const uint8 CYCODE USBUART_1_STRING_DESCRIPTORS[159u] = {
 154          /*********************************************************************
 155          * Language ID Descriptor
 156          *********************************************************************/
 157          /* Descriptor Length                       */ 0x04u,
 158          /* DescriptorType: STRING                  */ 0x03u,
 159          /* Language Id                             */ 0x09u, 0x04u,
 160          /*********************************************************************
 161          * String Descriptor: "Cypress Semiconductor"
 162          *********************************************************************/
 163          /* Descriptor Length                       */ 0x2Cu,
 164          /* DescriptorType: STRING                  */ 0x03u,
 165           (uint8)'C', 0u,(uint8)'y', 0u,(uint8)'p', 0u,(uint8)'r', 0u,(uint8)'e', 0u,
 166           (uint8)'s', 0u,(uint8)'s', 0u,(uint8)' ', 0u,(uint8)'S', 0u,(uint8)'e', 0u,
 167           (uint8)'m', 0u,(uint8)'i', 0u,(uint8)'c', 0u,(uint8)'o', 0u,(uint8)'n', 0u,
 168           (uint8)'d', 0u,(uint8)'u', 0u,(uint8)'c', 0u,(uint8)'t', 0u,(uint8)'o', 0u,
 169           (uint8)'r', 0u,
 170          /*********************************************************************
 171          * String Descriptor: "CDC Communication Interface"
 172          *********************************************************************/
 173          /* Descriptor Length                       */ 0x38u,
 174          /* DescriptorType: STRING                  */ 0x03u,
 175           (uint8)'C', 0u,(uint8)'D', 0u,(uint8)'C', 0u,(uint8)' ', 0u,(uint8)'C', 0u,
 176           (uint8)'o', 0u,(uint8)'m', 0u,(uint8)'m', 0u,(uint8)'u', 0u,(uint8)'n', 0u,
 177           (uint8)'i', 0u,(uint8)'c', 0u,(uint8)'a', 0u,(uint8)'t', 0u,(uint8)'i', 0u,
C51 COMPILER V9.51   USBUART_1_DESCR                                                       03/25/2014 11:26:59 PAGE 4   

 178           (uint8)'o', 0u,(uint8)'n', 0u,(uint8)' ', 0u,(uint8)'I', 0u,(uint8)'n', 0u,
 179           (uint8)'t', 0u,(uint8)'e', 0u,(uint8)'r', 0u,(uint8)'f', 0u,(uint8)'a', 0u,
 180           (uint8)'c', 0u,(uint8)'e', 0u,
 181          /*********************************************************************
 182          * String Descriptor: "CDC Data Interface"
 183          *********************************************************************/
 184          /* Descriptor Length                       */ 0x26u,
 185          /* DescriptorType: STRING                  */ 0x03u,
 186           (uint8)'C', 0u,(uint8)'D', 0u,(uint8)'C', 0u,(uint8)' ', 0u,(uint8)'D', 0u,
 187           (uint8)'a', 0u,(uint8)'t', 0u,(uint8)'a', 0u,(uint8)' ', 0u,(uint8)'I', 0u,
 188           (uint8)'n', 0u,(uint8)'t', 0u,(uint8)'e', 0u,(uint8)'r', 0u,(uint8)'f', 0u,
 189           (uint8)'a', 0u,(uint8)'c', 0u,(uint8)'e', 0u,
 190          /*********************************************************************
 191          * String Descriptor: "USBUART"
 192          *********************************************************************/
 193          /* Descriptor Length                       */ 0x10u,
 194          /* DescriptorType: STRING                  */ 0x03u,
 195           (uint8)'U', 0u,(uint8)'S', 0u,(uint8)'B', 0u,(uint8)'U', 0u,(uint8)'A', 0u,
 196           (uint8)'R', 0u,(uint8)'T', 0u,
 197          /*********************************************************************/
 198          /* Marks the end of the list.              */ 0x00u};
 199          /*********************************************************************/
 200          
 201          /*********************************************************************
 202          * Serial Number String Descriptor
 203          *********************************************************************/
 204          const uint8 CYCODE USBUART_1_SN_STRING_DESCRIPTOR[2] = {
 205          /* Descriptor Length                       */ 0x02u,
 206          /* DescriptorType: STRING                  */ 0x03u,
 207          
 208          };
 209          
 210          /*********************************************************************
 211          * HID Report Descriptor: 3-Button Mouse
 212          *********************************************************************/
 213          const uint8 CYCODE USBUART_1_HIDREPORT_DESCRIPTOR1[54u] = {
 214          /*  Descriptor Size (Not part of descriptor)*/ USBUART_1_HID_RPT_1_SIZE_LSB,
 215          USBUART_1_HID_RPT_1_SIZE_MSB,
 216          /* USAGE_PAGE                              */ 0x05u, 0x01u, 
 217          /* USAGE                                   */ 0x09u, 0x02u, 
 218          /* COLLECTION                              */ 0xA1u, 0x01u, 
 219          /* USAGE                                   */ 0x09u, 0x01u, 
 220          /* COLLECTION                              */ 0xA1u, 0x00u, 
 221          /* USAGE_PAGE                              */ 0x05u, 0x09u, 
 222          /* USAGE_MINIMUM                           */ 0x19u, 0x01u, 
 223          /* USAGE_MAXIMUM                           */ 0x29u, 0x03u, 
 224          /* LOGICAL_MINIMUM                         */ 0x15u, 0x00u, 
 225          /* LOGICAL_MAXIMUM                         */ 0x25u, 0x01u, 
 226          /* REPORT_COUNT                            */ 0x95u, 0x03u, 
 227          /* REPORT_SIZE                             */ 0x75u, 0x01u, 
 228          /* INPUT                                   */ 0x81u, 0x02u, 
 229          /* REPORT_COUNT                            */ 0x95u, 0x01u, 
 230          /* REPORT_SIZE                             */ 0x75u, 0x05u, 
 231          /* INPUT                                   */ 0x81u, 0x01u, 
 232          /* USAGE_PAGE                              */ 0x05u, 0x01u, 
 233          /* USAGE                                   */ 0x09u, 0x30u, 
 234          /* USAGE                                   */ 0x09u, 0x31u, 
 235          /* LOGICAL_MINIMUM                         */ 0x15u, 0x81u, 
 236          /* LOGICAL_MAXIMUM                         */ 0x25u, 0x7Fu, 
 237          /* REPORT_SIZE                             */ 0x75u, 0x08u, 
 238          /* REPORT_COUNT                            */ 0x95u, 0x02u, 
 239          /* INPUT                                   */ 0x81u, 0x06u, 
C51 COMPILER V9.51   USBUART_1_DESCR                                                       03/25/2014 11:26:59 PAGE 5   

 240          /* END_COLLECTION                          */ 0xC0u, 
 241          /* END_COLLECTION                          */ 0xC0u, 
 242          /*********************************************************************/
 243          /* End of the HID Report Descriptor        */ 0x00u, 0x00u};
 244          /*********************************************************************/
 245          
 246          
 247          /*********************************************************************
 248          * Endpoint Setting Table -- This table contain the endpoint setting
 249          *                           for each endpoint in the configuration. It
 250          *                           contains the necessary information to
 251          *                           configure the endpoint hardware for each
 252          *                           interface and alternate setting.
 253          *********************************************************************/
 254          const T_USBUART_1_EP_SETTINGS_BLOCK CYCODE USBUART_1_DEVICE0_CONFIGURATION0_EP_SETTINGS_TABLE[3u] = {
 255          /* IFC  ALT    EPAddr bmAttr MaxPktSize Class ********************/
 256          {0x00u, 0x00u, 0x81u, 0x03u, 0x0008u,   0x02u},
 257          {0x01u, 0x00u, 0x82u, 0x02u, 0x0040u,   0x0Au},
 258          {0x01u, 0x00u, 0x03u, 0x02u, 0x0040u,   0x0Au}
 259          };
 260          const uint8 CYCODE USBUART_1_DEVICE0_CONFIGURATION0_INTERFACE_CLASS[2u] = {
 261          0x02u, 0x0Au
 262          };
 263          /*********************************************************************
 264          * Config Dispatch Table -- Points to the Config Descriptor and each of
 265          *                          and endpoint setup table and to each
 266          *                          interface table if it specifies a USB Class
 267          *********************************************************************/
 268          const T_USBUART_1_LUT CYCODE USBUART_1_DEVICE0_CONFIGURATION0_TABLE[5u] = {
 269              {0x01u,     &USBUART_1_DEVICE0_CONFIGURATION0_DESCR},
 270              {0x03u,     &USBUART_1_DEVICE0_CONFIGURATION0_EP_SETTINGS_TABLE},
 271              {0x00u,    NULL},
 272              {0x00u,    NULL},
 273              {0x00u,     &USBUART_1_DEVICE0_CONFIGURATION0_INTERFACE_CLASS}
 274          };
 275          /*********************************************************************
 276          * Device Dispatch Table -- Points to the Device Descriptor and each of
 277          *                          and Configuration Tables for this Device 
 278          *********************************************************************/
 279          const T_USBUART_1_LUT CYCODE USBUART_1_DEVICE0_TABLE[2u] = {
 280              {0x01u,     &USBUART_1_DEVICE0_DESCR},
 281              {0x01u,     &USBUART_1_DEVICE0_CONFIGURATION0_TABLE}
 282          };
 283          /*********************************************************************
 284          * Device Table -- Indexed by the device number.
 285          *********************************************************************/
 286          const T_USBUART_1_LUT CYCODE USBUART_1_TABLE[1u] = {
 287              {0x01u,     &USBUART_1_DEVICE0_TABLE}
 288          };
 289          
 290          #endif /* USER_SUPPLIED_DESCRIPTORS */
 291          
 292          #if defined(USBUART_1_ENABLE_MSOS_STRING)
 293          
 294              /******************************************************************************
 295              *  USB Microsoft OS String Descriptor
 296              *  "MSFT" identifies a Microsoft host
 297              *  "100" specifies version 1.00
 298              *  USBUART_1_GET_EXTENDED_CONFIG_DESCRIPTOR becomes the bRequest value
 299              *  in a host vendor device/class request
 300              ******************************************************************************/
 301          
C51 COMPILER V9.51   USBUART_1_DESCR                                                       03/25/2014 11:26:59 PAGE 6   

 302              const uint8 CYCODE USBUART_1_MSOS_DESCRIPTOR[USBUART_1_MSOS_DESCRIPTOR_LENGTH] = {
 303              /* Descriptor Length                       */   0x12u,
 304              /* DescriptorType: STRING                  */   0x03u,
 305              /* qwSignature - "MSFT100"                 */   (uint8)'M', 0u, (uint8)'S', 0u, (uint8)'F', 0u, (uint8
             -)'T', 0u,
 306                                                              (uint8)'1', 0u, (uint8)'0', 0u, (uint8)'0', 0u,
 307              /* bMS_VendorCode:                         */   USBUART_1_GET_EXTENDED_CONFIG_DESCRIPTOR,
 308              /* bPad                                    */   0x00u
 309              };
 310          
 311              /* Extended Configuration Descriptor */
 312          
 313              const uint8 CYCODE USBUART_1_MSOS_CONFIGURATION_DESCR[USBUART_1_MSOS_CONF_DESCR_LENGTH] = {
 314              /*  Length of the descriptor 4 bytes       */   0x28u, 0x00u, 0x00u, 0x00u,
 315              /*  Version of the descriptor 2 bytes      */   0x00u, 0x01u,
 316              /*  wIndex - Fixed:INDEX_CONFIG_DESCRIPTOR */   0x04u, 0x00u,
 317              /*  bCount - Count of device functions.    */   0x01u,
 318              /*  Reserved : 7 bytes                     */   0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
 319              /*  bFirstInterfaceNumber                  */   0x00u,
 320              /*  Reserved                               */   0x01u,
 321              /*  compatibleID    - "CYUSB\0\0"          */   (uint8)'C', (uint8)'Y', (uint8)'U', (uint8)'S', (uint8
             -)'B',
 322                                                              0x00u, 0x00u, 0x00u,
 323              /*  subcompatibleID - "00001\0\0"          */   (uint8)'0', (uint8)'0', (uint8)'0', (uint8)'0', (uint8
             -)'1',
 324                                                              0x00u, 0x00u, 0x00u,
 325              /*  Reserved : 6 bytes                     */   0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u
 326              };
 327          
 328          #endif /* USBUART_1_ENABLE_MSOS_STRING */
 329          
 330          /* DIE ID string descriptor for 8 bytes ID */
 331          #if defined(USBUART_1_ENABLE_IDSN_STRING)
 332              uint8 USBUART_1_idSerialNumberStringDescriptor[USBUART_1_IDSN_DESCR_LENGTH];
 333          #endif /* USBUART_1_ENABLE_IDSN_STRING */
 334          
 335          
 336          /* [] END OF FILE */
C51 COMPILER V9.51   USBUART_1_DESCR                                                       03/25/2014 11:26:59 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =    413    ----
   XDATA SIZE       =     34    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
